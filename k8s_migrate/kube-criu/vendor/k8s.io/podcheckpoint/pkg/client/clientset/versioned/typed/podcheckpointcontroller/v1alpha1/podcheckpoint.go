/*
Copyright (c) 2014-2020 CGCL Labs
Container_Migrate is licensed under Mulan PSL v2.
You can use this software according to the terms and conditions of the Mulan PSL v2.
You may obtain a copy of Mulan PSL v2 at:
         http://license.coscl.org.cn/MulanPSL2
THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.
*/
/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "k8s.io/podcheckpoint/pkg/apis/podcheckpointcontroller/v1alpha1"
	scheme "k8s.io/podcheckpoint/pkg/client/clientset/versioned/scheme"
)

// PodCheckpointsGetter has a method to return a PodCheckpointInterface.
// A group's client should implement this interface.
type PodCheckpointsGetter interface {
	PodCheckpoints(namespace string) PodCheckpointInterface
}

// PodCheckpointInterface has methods to work with PodCheckpoint resources.
type PodCheckpointInterface interface {
	Create(*v1alpha1.PodCheckpoint) (*v1alpha1.PodCheckpoint, error)
	Update(*v1alpha1.PodCheckpoint) (*v1alpha1.PodCheckpoint, error)
	UpdateStatus(*v1alpha1.PodCheckpoint) (*v1alpha1.PodCheckpoint, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.PodCheckpoint, error)
	List(opts v1.ListOptions) (*v1alpha1.PodCheckpointList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PodCheckpoint, err error)
	PodCheckpointExpansion
}

// podCheckpoints implements PodCheckpointInterface
type podCheckpoints struct {
	client rest.Interface
	ns     string
}

// newPodCheckpoints returns a PodCheckpoints
func newPodCheckpoints(c *PodcheckpointcontrollerV1alpha1Client, namespace string) *podCheckpoints {
	return &podCheckpoints{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the podCheckpoint, and returns the corresponding podCheckpoint object, and an error if there is any.
func (c *podCheckpoints) Get(name string, options v1.GetOptions) (result *v1alpha1.PodCheckpoint, err error) {
	result = &v1alpha1.PodCheckpoint{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podcheckpoints").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PodCheckpoints that match those selectors.
func (c *podCheckpoints) List(opts v1.ListOptions) (result *v1alpha1.PodCheckpointList, err error) {
	result = &v1alpha1.PodCheckpointList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podcheckpoints").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested podCheckpoints.
func (c *podCheckpoints) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("podcheckpoints").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a podCheckpoint and creates it.  Returns the server's representation of the podCheckpoint, and an error, if there is any.
func (c *podCheckpoints) Create(podCheckpoint *v1alpha1.PodCheckpoint) (result *v1alpha1.PodCheckpoint, err error) {
	result = &v1alpha1.PodCheckpoint{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("podcheckpoints").
		Body(podCheckpoint).
		Do().
		Into(result)
	return
}

// Update takes the representation of a podCheckpoint and updates it. Returns the server's representation of the podCheckpoint, and an error, if there is any.
func (c *podCheckpoints) Update(podCheckpoint *v1alpha1.PodCheckpoint) (result *v1alpha1.PodCheckpoint, err error) {
	result = &v1alpha1.PodCheckpoint{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podcheckpoints").
		Name(podCheckpoint.Name).
		Body(podCheckpoint).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *podCheckpoints) UpdateStatus(podCheckpoint *v1alpha1.PodCheckpoint) (result *v1alpha1.PodCheckpoint, err error) {
	result = &v1alpha1.PodCheckpoint{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podcheckpoints").
		Name(podCheckpoint.Name).
		SubResource("status").
		Body(podCheckpoint).
		Do().
		Into(result)
	return
}

// Delete takes name of the podCheckpoint and deletes it. Returns an error if one occurs.
func (c *podCheckpoints) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podcheckpoints").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *podCheckpoints) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podcheckpoints").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched podCheckpoint.
func (c *podCheckpoints) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PodCheckpoint, err error) {
	result = &v1alpha1.PodCheckpoint{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("podcheckpoints").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}

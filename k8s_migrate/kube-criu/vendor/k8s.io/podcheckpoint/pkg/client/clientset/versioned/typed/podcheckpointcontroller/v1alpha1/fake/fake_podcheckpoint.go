/*
Copyright (c) 2014-2020 CGCL Labs
Container_Migrate is licensed under Mulan PSL v2.
You can use this software according to the terms and conditions of the Mulan PSL v2.
You may obtain a copy of Mulan PSL v2 at:
         http://license.coscl.org.cn/MulanPSL2
THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.
*/
/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
	v1alpha1 "k8s.io/podcheckpoint/pkg/apis/podcheckpointcontroller/v1alpha1"
)

// FakePodCheckpoints implements PodCheckpointInterface
type FakePodCheckpoints struct {
	Fake *FakePodcheckpointcontrollerV1alpha1
	ns   string
}

var podcheckpointsResource = schema.GroupVersionResource{Group: "podcheckpointcontroller.alibabacloud.com", Version: "v1alpha1", Resource: "podcheckpoints"}

var podcheckpointsKind = schema.GroupVersionKind{Group: "podcheckpointcontroller.alibabacloud.com", Version: "v1alpha1", Kind: "PodCheckpoint"}

// Get takes name of the podCheckpoint, and returns the corresponding podCheckpoint object, and an error if there is any.
func (c *FakePodCheckpoints) Get(name string, options v1.GetOptions) (result *v1alpha1.PodCheckpoint, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(podcheckpointsResource, c.ns, name), &v1alpha1.PodCheckpoint{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PodCheckpoint), err
}

// List takes label and field selectors, and returns the list of PodCheckpoints that match those selectors.
func (c *FakePodCheckpoints) List(opts v1.ListOptions) (result *v1alpha1.PodCheckpointList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(podcheckpointsResource, podcheckpointsKind, c.ns, opts), &v1alpha1.PodCheckpointList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PodCheckpointList{ListMeta: obj.(*v1alpha1.PodCheckpointList).ListMeta}
	for _, item := range obj.(*v1alpha1.PodCheckpointList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested podCheckpoints.
func (c *FakePodCheckpoints) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(podcheckpointsResource, c.ns, opts))

}

// Create takes the representation of a podCheckpoint and creates it.  Returns the server's representation of the podCheckpoint, and an error, if there is any.
func (c *FakePodCheckpoints) Create(podCheckpoint *v1alpha1.PodCheckpoint) (result *v1alpha1.PodCheckpoint, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(podcheckpointsResource, c.ns, podCheckpoint), &v1alpha1.PodCheckpoint{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PodCheckpoint), err
}

// Update takes the representation of a podCheckpoint and updates it. Returns the server's representation of the podCheckpoint, and an error, if there is any.
func (c *FakePodCheckpoints) Update(podCheckpoint *v1alpha1.PodCheckpoint) (result *v1alpha1.PodCheckpoint, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(podcheckpointsResource, c.ns, podCheckpoint), &v1alpha1.PodCheckpoint{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PodCheckpoint), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePodCheckpoints) UpdateStatus(podCheckpoint *v1alpha1.PodCheckpoint) (*v1alpha1.PodCheckpoint, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(podcheckpointsResource, "status", c.ns, podCheckpoint), &v1alpha1.PodCheckpoint{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PodCheckpoint), err
}

// Delete takes name of the podCheckpoint and deletes it. Returns an error if one occurs.
func (c *FakePodCheckpoints) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(podcheckpointsResource, c.ns, name), &v1alpha1.PodCheckpoint{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePodCheckpoints) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(podcheckpointsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.PodCheckpointList{})
	return err
}

// Patch applies the patch and returns the patched podCheckpoint.
func (c *FakePodCheckpoints) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PodCheckpoint, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(podcheckpointsResource, c.ns, name, data, subresources...), &v1alpha1.PodCheckpoint{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PodCheckpoint), err
}
